<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Multithreading on Documentation for Hugo Learn Theme</title>
    <link>https://wonha.github.io/en/tags/multithreading/</link>
    <description>Recent content in Multithreading on Documentation for Hugo Learn Theme</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Sat, 22 Dec 2018 21:38:53 +0900</lastBuildDate>
    
	<atom:link href="https://wonha.github.io/en/tags/multithreading/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Thread Pools in Java</title>
      <link>https://wonha.github.io/en/posts/thread-pools-in-java/</link>
      <pubDate>Sat, 22 Dec 2018 21:38:53 +0900</pubDate>
      
      <guid>https://wonha.github.io/en/posts/thread-pools-in-java/</guid>
      <description>Executor Framework Main Components  ExecutorService  &amp;gt; Executor &amp;gt; ExecutorService  ThreadPoolExecutor  &amp;gt; Executor &amp;gt; ExecutorService &amp;gt; AbstraceExecutorService &amp;gt; ThreadPoolExecutor &amp;gt; execute() &amp;gt; submit() &amp;gt; invokeAny() &amp;gt; invokeAll() &amp;gt; shutdown() -- soft shutdown &amp;gt; shutdownNow() -- a waiting ExecutorSErvice will cause the JVM to kee running  ScheduledThreadPoolExecutor  &amp;gt; Executor &amp;gt; ExecutorService &amp;gt; AbstraceExecutorService &amp;gt; ThreadPoolExecutor &amp;gt; ScheduledThreadPoolExecutor &amp;gt; Executor &amp;gt; ExecutorService &amp;gt; ScheduledExecutorService &amp;gt; ScheduledThreadPoolExecutor   Fork/Join Pool Framework This framework first &amp;lsquo;fork&amp;rsquo; the given task, processing it, and then &amp;lsquo;join&amp;rsquo;.</description>
    </item>
    
    <item>
      <title>Anatomy of CompletableFuture</title>
      <link>https://wonha.github.io/en/posts/anatomy-of-completablefuture/</link>
      <pubDate>Sat, 22 Dec 2018 20:42:24 +0900</pubDate>
      
      <guid>https://wonha.github.io/en/posts/anatomy-of-completablefuture/</guid>
      <description>Asynchronous Computation with CompletableFuture Without utility methods public Future&amp;lt;String&amp;gt; boilerPlateFuture() throws InterruptedException { CompletableFuture&amp;lt;String&amp;gt; completableFuture = new CompletableFuture&amp;lt;&amp;gt;(); Executors.newCachedThreadPool().submit(() -&amp;gt; { Thread.sleep(500); completableFuture.complete(&amp;quot;Hello, I am &amp;quot; + Thread.currentThread().getName()); return null; }); return completableFuture; }  Supply, Apply and Accept Future&amp;lt;Void&amp;gt; future = CompletableFuture.supplyAsync(() -&amp;gt; { try { Thread.sleep(1000); } catch (InterruptedException e) { e.printStackTrace(); } log.info(&amp;quot;do supplyAsync&amp;quot;); return &amp;quot;Hello&amp;quot;; }).thenApply(s -&amp;gt; { try { Thread.sleep(1000); } catch (InterruptedException e) { e.</description>
    </item>
    
  </channel>
</rss>